/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let myLibrary = [];\nlet uniqueID=0;\nif(JSON.parse(localStorage.getItem('library'))==null){\n  myLibrary=[];\n  console.log(1+\": Library item not available so far\");\n}\nelse{\n  myLibrary = JSON.parse(localStorage.getItem('library'));\n  console.log(2+\": We have library item already!\");\n  \n}\n\nif(JSON.parse(localStorage.getItem('ID'))==null){\n  uniqueID = 0;\n}else{\n  uniqueID = JSON.parse(localStorage.getItem('ID'));\n}\nlet addBookButton = document.getElementById('add-book');\nlet deleteButtons = document.querySelectorAll('.delete-button');\nlet updateButtons = document.querySelectorAll('.update-button');\nlet toggleReadButtons = document.querySelectorAll('.read-status');\nlet form = document.getElementById('form');\nlet book_name = document.getElementById('book_name');\nlet page = document.getElementById('page');\nlet author = document.getElementById('author');\nlet read = document.getElementById('read');\n\nlet Alert = new CustomAlert();\n\nconst mainContainer = document.getElementById('books-container');\n\naddBookButton.addEventListener('click',function(){\n  // console.log(addBookButton.textContent);\n  // console.log(\"Add clicked\");\n  Alert.render('');\n});\n\nfunction Book(title, author, pages, read) {\n  // the constructor...\n  this.title = title;\n  this.author = author;\n  this.pages = pages;\n  this.read = read; //boolean\n  this.id=uniqueID;\n  uniqueID++;\n}\n\nfunction addBookToLibrary(title, author, pages, read) {\n  // do stuff here\n  let book = new Book(title, author, pages, read);\n  myLibrary.push(book);\n  // console.log(myLibrary);\n  getAllBooks();\n}\n\nfunction getAllBooks(){\n  removeBooks();\n  for(let i=0;i<myLibrary.length;i++){\n    if(myLibrary[i].read===true){\n      mainContainer.innerHTML+=`<div class='book block' id='${myLibrary[i].id}'>\n    <div class='book-name' >\n        <p>${myLibrary[i].title}</p>\n    </div>\n    <div class='book-author'><p>${myLibrary[i].author}</p></div>\n      <div class='block-bottom'>\n          <div class='pages'><p>${myLibrary[i].pages}</p></div>\n          <div class='read-status'><img src='../assets/tick.svg'></div>\n          <div class='update-button'><img src='../assets/update.svg'></div>\n          <div class='delete-button' ><img src='../assets/delete-button.svg'></div>\n      </div>\n    </div>`;\n    }else{\n      mainContainer.innerHTML+=`<div class='book block' id='${myLibrary[i].id}'>\n    <div class='book-name' >\n        <p>${myLibrary[i].title}</p>\n    </div>\n    <div class='book-author'><p>${myLibrary[i].author}</p></div>\n      <div class='block-bottom'>\n          <div class='pages'><p>${myLibrary[i].pages}</p></div>\n          <div class='read-status'><img src='../assets/cross.svg'></div>\n          <div class='update-button'><img src='../assets/update.svg'></div>\n          <div class='delete-button' ><img src='../assets/delete-button.svg'></div>\n      </div>\n    </div>`;\n    }\n    // console.log(myLibrary[i]);\n  }\n  localStorage.setItem('library',JSON.stringify(myLibrary));\n  console.log(\"From local storage API: \"+JSON.parse(localStorage.getItem('library')));\n  localStorage.setItem('ID',uniqueID);\n  mainContainer.innerHTML+=`<div class='add block' id='add-book'\">+</div>`; //onclick=\"Alert.render('')\n  addBookButton = document.getElementById('add-book');\n  addBookButton.addEventListener('click',function(){\n    // console.log(\"Add clicked\");\n    Alert.render('');\n    // let bookTitle = prompt('title');\n    // let bookAuthor = prompt('Book Author');\n    // let bookPages = prompt('Pages in book');\n    // let bookRead = prompt('Read the book?');\n    // document.innerHTML+=`<div class='form-container><form>Hello</form></div>`; \n  });\n\n  deleteButtons = document.querySelectorAll('.delete-button');\n  console.log(\"Delete buttons:\"+deleteButtons);\n  for(let i=0;i<deleteButtons.length;i++){\n    // console.log(`Delete button ${i} : ${deleteButtons[i]}`);\n    deleteButtons[i].addEventListener('click',deleteBook);\n  }\n\n  updateButtons = document.querySelectorAll('.update-button');\n  // console.log(\"Update buttons:\"+updateButtons);\n  // console.log(updateButtons);\n  for(let i=0;i<updateButtons.length;i++){\n    // console.log(`Update button ${i} : ${updateButtons[i]}`);\n    updateButtons[i].addEventListener('click',Alert.updateRender);\n  }\n  \n  toggleReadButtons = document.querySelectorAll('.read-status');\n  // console.log(\"Read buttons:\"+toggleReadButtons);\n  for(let i=0;i<toggleReadButtons.length;i++){\n    // console.log(`Toggle read button ${i} : ${toggleReadButtons[i]}`);\n    toggleReadButtons[i].addEventListener('click',toggleReadStatus);\n  }\n}\nfunction removeBooks(){\n  mainContainer.innerHTML=``;\n}\n\nfunction deleteBook(){\n  let id = this.parentNode.parentNode.id;\n  // console.log(\"Delete clicked: \"+id);\n  for(let i=0;i<myLibrary.length;i++){\n    if(id==myLibrary[i].id){\n      let index = i;\n      myLibrary.splice(index,1);\n      break;\n    }\n  }\n  getAllBooks();\n}\n\nfunction updateBook(bookTitle,bookAuthor,bookPages,bookRead,id){\n  // let id = this.parentNode.parentNode.id;\n  console.log(\"Update clicked: \"+id);\n  for(let i=0;i<myLibrary.length;i++){\n    if(id==myLibrary[i].id){\n      // let index = i;\n      // myLibrary.splice(index,1);\n      // myLibrary[i].title;\n      myLibrary[i].title = bookTitle;\n      myLibrary[i].author = bookAuthor ;\n      myLibrary[i].pages = bookPages;\n      myLibrary[i].read = bookRead;\n      myLibrary[i].id = id;\n      form.reset();\n      // Alert.updateRender(bookTitle,bookAuthor,bookPages,bookRead,bookId);\n    }\n  }\n  getAllBooks();\n}\n\nfunction toggleReadStatus(){\n  let id = this.parentNode.parentNode.id;\n  // console.log(`Read status ${id}`);\n  for(let i=0;i<myLibrary.length;i++){\n    if(id==myLibrary[i].id){\n      myLibrary[i].read = !(myLibrary[i].read);\n      console.log(myLibrary[i].read);\n      break;\n    }\n  }\n  getAllBooks();\n}\n\n//Pop Up form functions\n\n\nfunction CustomAlert(){\n  this.render = function(){\n      //Show Modal\n      let popUpBox = document.getElementById('popUpBox');\n      popUpBox.style.display = \"block\";\n      let form = document.getElementById('form');\n      // form.style.display = \"block\";\n      //Close Modal\n      document.getElementById('closeModal').innerHTML = '<button id=\"add-new\">Add New</button>';\n      let addNew = document.getElementById('add-new');\n      addNew.addEventListener('click',Alert.addNew);\n  }\n\n  this.addNew = function(){\n    let book_name = document.getElementById('book_name');\n    let page = document.getElementById('page');\n    let author = document.getElementById('author');\n    document.getElementById('popUpBox').style.display = \"none\";\n    document.getElementById('popUpOverlay').style.display = \"none\";\n    // document.getElementById('form').style.display='none';\n    // console.log(book_name.value);\n    // console.log(read.checked);\n    if(book_name.value!==''&&author.value!==''&&page.value>0&&page.value<=10000){\n      let bookTitle = book_name.value;\n      let bookAuthor = author.value;\n      let bookPages = page.value;\n      let bookRead = read.checked;\n      addBookToLibrary(bookTitle,bookAuthor,bookPages,bookRead);\n      form.reset();\n    }\n    else{\n    //   Alert.render();\n    this.render();\n    }\n  }\n\n  this.updateRender = function(){\n    let popUpBox = document.getElementById('popUpBox');\n    let form = document.getElementById('form');\n    // form.style.display = \"block\";\n    //Close Modal\n    let id = this.parentNode.parentNode.id;\n    // console.log(this.parentNode.parentNode.id);\n    console.log(\"Update clicked: \"+id);\n    for(let i=0;i<myLibrary.length;i++){\n      if(id==myLibrary[i].id){\n        let index = i;\n        let bookTitle = myLibrary[i].title;\n        let bookAuthor = myLibrary[i].author;\n        let bookPages = myLibrary[i].pages;\n        let bookRead = myLibrary[i].read;\n        let bookId = myLibrary[i].id;\n        // console.log(form);\n        book_name.setAttribute('value',bookTitle);\n        author.setAttribute('value',bookAuthor);\n        page.setAttribute('value',bookPages);\n        if(bookRead==true){\n          read.setAttribute('checked',bookRead);\n        }else{\n          read.setAttribute('unchecked',bookRead);\n        }\n        \n      }\n      // console.log(form);\n      popUpBox.style.display = \"block\";\n      document.getElementById('closeModal').innerHTML = `<button id=\"update-button\">Update</button>`;  //onclick=\"Alert.update(${id})\n      let updateButton = document.getElementById(\"update-button\");\n      updateButton.addEventListener('click',()=>(Alert.update(id)))\n  }\n}\n\n  this.update = function(id){\n    let book_name = document.getElementById('book_name');\n    let page = document.getElementById('page');\n    let author = document.getElementById('author');\n    document.getElementById('popUpBox').style.display = \"none\";\n    document.getElementById('popUpOverlay').style.display = \"none\";\n    console.log(book_name.value);\n    console.log(read.checked);\n    if(book_name.value!==''&&author.value!==''&&page.value>0&&page.value<=10000){\n      let bookTitle = book_name.value;\n      let bookAuthor = author.value;\n      let bookPages = page.value;\n      let bookRead = read.checked;\n      console.log(id);\n      updateBook(bookTitle,bookAuthor,bookPages,bookRead,id);\n      book_name.removeAttribute('value');\n      page.removeAttribute('value');\n      author.removeAttribute('value');\n      read.removeAttribute('checked');\n      read.removeAttribute('unchecked');\n    }\n    else{\n    //   Alert.updateRender();\n    this.updateRender();\n    }\n  }\n}\n\nform.reset();\n\nfunction storageAvailable(type) {\n  var storage;\n  try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n  }\n  catch(e) {\n      return e instanceof DOMException && (\n          // everything except Firefox\n          e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === 'QuotaExceededError' ||\n          // Firefox\n          e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n          // acknowledge QuotaExceededError only if there's something already stored\n          (storage && storage.length !== 0);\n  }\n  \n}\nif (storageAvailable('localStorage')) {\n  console.log(`Yippee! We can use localStorage awesomeness`);\n}\nelse {\n  console.log(`Too bad, no localStorage for us`);\n}\nlocalStorage.setItem('library',JSON.stringify(myLibrary));\nlocalStorage.setItem('ID',uniqueID);\n\nfunction getBooksFromStorage(){\n  let items = JSON.parse(localStorage.getItem('library'))\n  console.log(\"Books in storage:\"+items.length);\n  for(let i=0;i<items.length;i++){\n    console.log(`Item ${i}:`);\n    console.log(items[i]);\n  }\n}\ngetBooksFromStorage();\ngetAllBooks();\n\n//# sourceURL=webpack://library/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;